from web_security_academy.core.logger import logger

from urllib.parse import urljoin, urlparse
from bs4 import BeautifulSoup


class ExploitServer:
    def __init__(self, session):
        self.session = session

        logger.debug("Determining exploit server URL...")

        resp = session.get_path("/")
        soup = BeautifulSoup(resp.text, "lxml")
        exploit_link = soup.select_one("#exploit-link")

        if exploit_link is None:
            logger.failure("Unable to find exploit server URL.")
            exit(1)
        else:
            self.url = exploit_link.get("href")
            self.hostname = urlparse(self.url).hostname
            logger.info(f"Exploit server URL: {self.url}")

    def _send_request(self, path, head, body, form_action, https=True):
        data = {
            "responseFile": path,
            "responseHead": head,
            "responseBody": body,
            "formAction": form_action,
        }

        if https:
            data["urlIsHttps"] = "on"

        self.session.post(self.url, data=data)

    def craft_response(self, path, head, body, https=True):
        self._send_request(path, head, body, "STORE")
        logger.info(f"Added the following HTTP response to {self.url}{path}:")
        print(f"{head}\n\n{body}")

    # TODO
    def view_exploit(self, path):
        pass

    def access_log(self):
        url = urljoin(self.url, "/log")
        resp = self.session.get(url)
        soup = BeautifulSoup(resp.text, "lxml")
        return soup.select_one("pre").text

    def deliver_exploit_to_victim(self, path, head, body, https=True):
        self._send_request(path, head, body, "DELIVER_TO_VICTIM")
        logger.info("Delivered the following HTTP payload to victim:")
        print(f"{head}\n\n{body}")

    # TODO: Authentication Exploit Server
    # def get_email(self, n):
    #     url = urljoin(self.url, "/email")
    #     params = {"raw": str(n)}

    #     resp = self.session.get(url)

    #     if resp.status_code == 500:
    #         logger.failure("TODO")
    #         exit(1)
    #     logger.failure("TODO")
    #     exit(1)
